#include "main.h"
/**
 * execute_with_path - Execute a command using the PATH environment variable
 * @args: The command and its arguments
*/
void execute_with_path(char **args)
{
	pid_t pid;
	int status, exit_code = WEXITSTATUS(status);
	char *path = getenv("PATH"), *path_copy = strdup(path);
	char *path_token = strtok(path_copy, ":");
	char command_path[MAX_COMMAND_LENGTH];

	if (path == NULL)
	{
		fprintf(stderr, "Error: PATH environment variable not set\n");
		return;
	}
	while (path_token != NULL)
	{
		snprintf(command_path, sizeof(command_path), 
				"%s/%s", path_token, args[0]);

		if (access(command_path, X_OK) == 0)
		{
			pid = fork();

			if (pid < 0)
			{
				perror("Fork failed");
				exit(1);
			}
			else if (pid == 0)
			{
				if (execvp(command_path, args) == -1)
				{
					perror("Command execution failed");
					exit(1);
				}
			}
			else
			{
				waitpid(pid, &status, 0);

				if (WIFEXITED(status))
				{
					if (exit_code != 0)
					{
						printf("%d\n", exit_code);
					}
				}
				break;
			}
		}
		path_token = strtok(NULL, ":");
	}
	free(path_copy);
}
/**
 * execute_command - Execute a command in a child process
 * @input: The command to execute
*/
void execute_command(const char *input)
{
	pid_t pid;
	int status, i = 0, exit_code = WEXITSTATUS(status);

	pid = fork();
	if (pid < 0)
	{
		perror("Fork failed");
		exit(1);
	}
	else if (pid == 0)
	{
		char *args[MAX_COMMAND_LENGTH], *token;

		token = strtok((char *)input, " ");
		while (token != NULL)
		{
			args[i++] = token;
			token = strtok(NULL, " ");
		}
		args[i] = NULL;
		if (execvp(args[0], args) == -1)
		{
			perror("Command execution failed");
			exit(1);
		}
	}
	else
	{
		waitpid(pid, &status, 0);

		if (WIFEXITED(status))
		{
			if (exit_code != 0)
			{
				printf("No such file or directory\n");
			}
		}
	}
}
/**
 * main - Entry point for the simple shell program
 * Return: Always 0.
*/
int main(void)
{
	char input[MAX_COMMAND_LENGTH];
	size_t input_length;

	while (1)
	{
		printf("simple_shell> ");

		if (fgets(input, sizeof(input), stdin) == NULL)
		{
			if (feof(stdin))
			{
				printf("\nGoodbye!\n");
				exit(0);
			}
			else
			{
				perror("Error reading input");
				exit(1);
			}
		}
		input_length = strlen(input);
		if (input_length > 0 && input[input_length - 1] == '\n')
		{
			input[input_length - 1] = '\0';
		}
		if (strcmp(input, "") == 0)
		{
			continue;
		}
		if (strchr(input, ' ') || strncmp(input, "/bin/", 5) != 0)
		{
			printf("No such file or directory\n");
		}
		else
		{
			execute_command(input);
		}
	}
	return (0);
}
